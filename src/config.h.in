#pragma once

#include <raylib.h>

namespace game {
    class Config final {
    public:
        inline static constexpr const char* kProjectName = "@PROJECT_NAME@";
        inline static constexpr const char* kProjectVersion = "@PROJECT_VERSION@";
        inline static constexpr const char* kProjectVersionMajor = "@PROJECT_VERSION_MAJOR@";
        inline static constexpr const char* kProjectVersionMinor = "@PROJECT_VERSION_MINOR@";
        inline static constexpr const char* kProjectVersionPatch = "@PROJECT_VERSION_PATCH@";

        // Width and Height of the game stage. The stage will be scaled with the window size
        inline static constexpr int kStageWidth = 960;
        inline static constexpr int kStageHeight = 540;

        // Target FPS, default is 60 fps
        inline static constexpr int kTargetFps = 60;

        // Start game in window or fullscreen mode
        inline static constexpr const bool kFullScreen = false;

        // Define if the game uses a mouse/mouse pointer
        // The mouse position is then accessible in game::core::Store in the mouse_position attribute
        // Please do not use the Raylib function GetMousePosition()
        inline static constexpr const bool kUseMouse = false;

        // Raylib window config flags, e.g. for resizable window and vertical synchronisation
        // Default: GAME_CONFIG_FLAGS FLAG_WINDOW_RESIZABLE | FLAG_VSYNC_HINT | FLAG_MSAA_4X_HINT
        inline static constexpr const int kWindowFlags = FLAG_WINDOW_RESIZABLE | FLAG_VSYNC_HINT | FLAG_MSAA_4X_HINT;

        // Texture scale filter to use, e.g. TEXTURE_FILTER_POINT, TEXTURE_FILTER_BILINEAR etc.
        // Default: TEXTURE_FILTER_POINT for no filter, only pixel approximation
        inline static constexpr const int kTextureFilter = TEXTURE_FILTER_POINT;

        // Define Raylib exit key - KEY_NULL means that no key leads to the termination of the program
        // Raylib default is KEY_ESCAPE
        inline static constexpr const int kExitKey = KEY_NULL;

        // Defines if Raylib audio should be enabled
        inline static constexpr const bool kAudio = true;

        // Player Settings
        inline static constexpr bool enable_Health_Drain = true; // HP-Drain durch Zeit an/aus
        inline static constexpr float player_Health_Drain_Rate = 1.0f; // HP-Verlust pro Sekunde
        inline static constexpr int player_Hitbox_Width = 32;
        inline static constexpr int player_Hitbox_Height = 48;

        // PlayerClass1
        inline static constexpr int player_Class_1_Max_Health = 1000;
        inline static constexpr float player_Class_1_Movement_Speed = 16.0f;
        inline static constexpr int player_Class_1_Damage = 10;
        inline static constexpr const char* player_Class_1_Sprite_Path = "assets/graphics/player_Class_1.png";

        // EnemyClass1
        inline static constexpr int enemy_Class_1_Health = 50;
        inline static constexpr float enemy_Class_1_Movement_Speed = 100.0f;
        inline static constexpr int enemy_Class_1_Damage = 5;
        inline static constexpr int enemy_Class_1_Value = 10; // Punkte f√ºr den Kill
        inline static constexpr const char* enemy_Class_1_Sprite_Path = "assets/graphics/enemy_Class_1.png";
        inline static constexpr int enemy_Class_1_Hitbox_Width = 32;
        inline static constexpr int enemy_Class_1_Hitbox_Height = 32;

        // Objects
                inline static constexpr const char consumables_path ="assets/graphics/ball.png"


            // Control Settings
                inline static constexpr const int key_Up = KEY_W;
                inline static constexpr const int key_Down = KEY_S;
                inline static constexpr const int key_Left = KEY_A;
                inline static constexpr const int key_Right = KEY_D;
    };
}
